import numpy as np
import matplotlib.pyplot as plt

# Parameters
nx = 60         # Number of spatial points
dx = 6.0 / nx   # Spatial step size
dt = 0.000001        # Time step size
T = 1        # Final time
nt = int(T / dt) # Number of time steps

# Spatial domain
x = np.linspace(-3, 3, nx, endpoint=False)

# Initial condition
u = np.where(x < 0, -1, 2).astype(float)


# Godunov flux function for Burgers' equation
def godunov_flux(uL, uR):
     if uL <= uR:  # Rarefaction
        return min(uL**2 / 2, uR**2 / 2)
     else:  # Shock
        s = 0.5 * (uL + uR)
        if s > 0:
            return uL**2 / 2
        else:
            return uR**2 / 2
    
    
# Time stepping loop
#for _ in range(nt):
u_new = np.copy(u).astype(float)
for t in range(nt):
    for i in range(1, nx-1):
        flux_right = godunov_flux(u[i], u[i+1])
        flux_left = godunov_flux(u[i-1], u[i])
        u_new[i] = u[i] - (dt/dx) * (flux_right - flux_left)
    u = u_new
   



 #Plot the exact solution (solid line)
x_exact = np.linspace(-3, 3, 500)
u_exact = np.piecewise(
    x_exact, 
    [x_exact < -1, (x_exact >= -1) & (x_exact < 2), x_exact >= 2],
    [-1, lambda x: x , 2]
)

plt.plot(x_exact, u_exact,'k-',  label="Exact Solution (Entropy-Satisfying)")

# Plot the computed numerical solution (circles)
plt.plot(x, u,'ko', markerfacecolor='none', label="Numerical Solution (No Entropy Fix)")

# Formatting the plot
plt.xlabel('x')
plt.ylabel('u(x)')
plt.title('Godunov with Entropy Fix')
plt.legend()
plt.grid(True)
plt.ylim(-1.5, 2.5)
plt.xlim(-3, 3)
plt.show()
